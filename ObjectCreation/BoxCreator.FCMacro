# -*- coding: utf-8 -*-

__Name__ = 'BoxCreator'
__Comment__ = 'Creates a box with interlocked notches'
__Author__ = 'christi'
__Version__ = '1.2'
__Date__ = '2019-06-01'
__License__ = 'LGPL-3.0-or-later'
__Web__ = 'https://github.com/chbergmann/boxcreator'
__Wiki__ = ''
__Icon__ = ''
__Help__ = 'Try it out and play with it. It should be self explanatory'
__Status__ = 'Beta'
__Requires__ = 'FreeCAD >= v0.17'
__Communication__ = 'https://forum.freecadweb.org/viewtopic.php?p=264483'
__Files__ = 'boxcreator/__init__.py,boxcreator/boxcreator.py'

# Form implementation generated from reading ui file 'boxcreator.ui'
#
# Created: Thu Oct 25 21:10:42 2018
#      by: pyside-uic 0.2.15 running on PySide 1.2.2

from PySide import QtCore, QtGui

import FreeCAD as app
import FreeCADGui as gui


class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName('Dialog')
        Dialog.resize(252, 607)
        Dialog.setWindowTitle('Box Creator')
        self.gridLayout = QtGui.QGridLayout(Dialog)
        self.gridLayout.setObjectName('gridLayout')
        self.checkBoxBottom = QtGui.QCheckBox(Dialog)
        self.checkBoxBottom.setText('bottom')
        self.checkBoxBottom.setChecked(True)
        self.checkBoxBottom.setObjectName('checkBoxBottom')
        self.gridLayout.addWidget(self.checkBoxBottom, 6, 2, 1, 1)
        self.checkBoxRight = QtGui.QCheckBox(Dialog)
        self.checkBoxRight.setText('right')
        self.checkBoxRight.setChecked(True)
        self.checkBoxRight.setObjectName('checkBoxRight')
        self.gridLayout.addWidget(self.checkBoxRight, 8, 2, 1, 1)
        self.label = QtGui.QLabel(Dialog)
        self.label.setText('Width')
        self.label.setObjectName('label')
        self.gridLayout.addWidget(self.label, 0, 0, 1, 1)
        self.doubleSpinBoxWidth = QtGui.QDoubleSpinBox(Dialog)
        self.doubleSpinBoxWidth.setDecimals(2)
        self.doubleSpinBoxWidth.setMinimum(0.0)
        self.doubleSpinBoxWidth.setMaximum(999999.0)
        self.doubleSpinBoxWidth.setValue(40.0)
        self.doubleSpinBoxWidth.setObjectName('doubleSpinBoxWidth')
        self.gridLayout.addWidget(self.doubleSpinBoxWidth, 0, 2, 1, 1)
        self.label_2 = QtGui.QLabel(Dialog)
        self.label_2.setText('Height')
        self.label_2.setObjectName('label_2')
        self.gridLayout.addWidget(self.label_2, 1, 0, 1, 1)
        self.doubleSpinBoxHeight = QtGui.QDoubleSpinBox(Dialog)
        self.doubleSpinBoxHeight.setMaximum(999999.0)
        self.doubleSpinBoxHeight.setValue(50.0)
        self.doubleSpinBoxHeight.setObjectName('doubleSpinBoxHeight')
        self.gridLayout.addWidget(self.doubleSpinBoxHeight, 1, 2, 1, 1)
        self.labelLength = QtGui.QLabel(Dialog)
        self.labelLength.setText('Length')
        self.labelLength.setObjectName('labelLength')
        self.gridLayout.addWidget(self.labelLength, 2, 0, 1, 1)
        self.doubleSpinBoxMaterialWidth = QtGui.QDoubleSpinBox(Dialog)
        self.doubleSpinBoxMaterialWidth.setMaximum(999999.0)
        self.doubleSpinBoxMaterialWidth.setValue(3.0)
        self.doubleSpinBoxMaterialWidth.setObjectName('doubleSpinBoxMaterialWidth')
        self.gridLayout.addWidget(self.doubleSpinBoxMaterialWidth, 4, 2, 1, 1)
        self.doubleSpinBoxLength = QtGui.QDoubleSpinBox(Dialog)
        self.doubleSpinBoxLength.setMaximum(999999.0)
        self.doubleSpinBoxLength.setValue(30.0)
        self.doubleSpinBoxLength.setObjectName('doubleSpinBoxLength')
        self.gridLayout.addWidget(self.doubleSpinBoxLength, 2, 2, 1, 1)
        self.labelNotchWidth = QtGui.QLabel(Dialog)
        self.labelNotchWidth.setText('Notch Width')
        self.labelNotchWidth.setObjectName('labelNotchWidth')
        self.gridLayout.addWidget(self.labelNotchWidth, 3, 0, 1, 2)
        self.doubleSpinBoxNotchWidth = QtGui.QDoubleSpinBox(Dialog)
        self.doubleSpinBoxNotchWidth.setMaximum(999999.0)
        self.doubleSpinBoxNotchWidth.setValue(8.0)
        self.doubleSpinBoxNotchWidth.setObjectName('doubleSpinBoxNotchWidth')
        self.gridLayout.addWidget(self.doubleSpinBoxNotchWidth, 3, 2, 1, 1)
        self.labelMatWidth = QtGui.QLabel(Dialog)
        self.labelMatWidth.setText('Material Width')
        self.labelMatWidth.setObjectName('labelMatWidth')
        self.gridLayout.addWidget(self.labelMatWidth, 4, 0, 1, 2)
        self.pushButtonCreate = QtGui.QPushButton(Dialog)
        self.pushButtonCreate.setText('Create Box')
        self.pushButtonCreate.setObjectName('pushButtonCreate')
        self.gridLayout.addWidget(self.pushButtonCreate, 23, 0, 1, 3)
        spacerItem = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem, 5, 0, 1, 1)
        self.checkBoxBack = QtGui.QCheckBox(Dialog)
        self.checkBoxBack.setText('back')
        self.checkBoxBack.setChecked(True)
        self.checkBoxBack.setObjectName('checkBoxBack')
        self.gridLayout.addWidget(self.checkBoxBack, 10, 2, 1, 1)
        self.overhangTopLeft = QtGui.QDoubleSpinBox(Dialog)
        self.overhangTopLeft.setMaximum(999999.0)
        self.overhangTopLeft.setObjectName('overhangTopLeft')
        self.gridLayout.addWidget(self.overhangTopLeft, 13, 2, 1, 1)
        self.checkBoxTop = QtGui.QCheckBox(Dialog)
        self.checkBoxTop.setText('top')
        self.checkBoxTop.setChecked(True)
        self.checkBoxTop.setObjectName('checkBoxTop')
        self.gridLayout.addWidget(self.checkBoxTop, 6, 0, 1, 1)
        self.checkBoxLeft = QtGui.QCheckBox(Dialog)
        self.checkBoxLeft.setText('left')
        self.checkBoxLeft.setChecked(True)
        self.checkBoxLeft.setObjectName('checkBoxLeft')
        self.gridLayout.addWidget(self.checkBoxLeft, 8, 0, 1, 1)
        self.checkBoxFront = QtGui.QCheckBox(Dialog)
        self.checkBoxFront.setText('front')
        self.checkBoxFront.setChecked(True)
        self.checkBoxFront.setObjectName('checkBoxFront')
        self.gridLayout.addWidget(self.checkBoxFront, 10, 0, 1, 1)
        spacerItem1 = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem1, 12, 0, 1, 1)
        self.labelOverhangTopLeft = QtGui.QLabel(Dialog)
        self.labelOverhangTopLeft.setText('Overhang top left')
        self.labelOverhangTopLeft.setObjectName('labelOverhangTopLeft')
        self.gridLayout.addWidget(self.labelOverhangTopLeft, 13, 0, 1, 1)
        self.labelOverhangTopBack = QtGui.QLabel(Dialog)
        self.labelOverhangTopBack.setText('Overhang top back')
        self.labelOverhangTopBack.setObjectName('labelOverhangTopBack')
        self.gridLayout.addWidget(self.labelOverhangTopBack, 16, 0, 1, 1)
        self.labelOverhangTopFront = QtGui.QLabel(Dialog)
        self.labelOverhangTopFront.setText('Overhang top front')
        self.labelOverhangTopFront.setObjectName('labelOverhangTopFront')
        self.gridLayout.addWidget(self.labelOverhangTopFront, 15, 0, 1, 1)
        self.labelOverhangTopRight = QtGui.QLabel(Dialog)
        self.labelOverhangTopRight.setText('Overhang top right')
        self.labelOverhangTopRight.setObjectName('labelOverhangTopRight')
        self.gridLayout.addWidget(self.labelOverhangTopRight, 14, 0, 1, 1)
        self.labelOverhangBotBack = QtGui.QLabel(Dialog)
        self.labelOverhangBotBack.setText('Overhang bottom back')
        self.labelOverhangBotBack.setObjectName('labelOverhangBotBack')
        self.gridLayout.addWidget(self.labelOverhangBotBack, 21, 0, 1, 1)
        self.labelOverhangBotRight = QtGui.QLabel(Dialog)
        self.labelOverhangBotRight.setText('Overhang bottom right')
        self.labelOverhangBotRight.setObjectName('labelOverhangBotRight')
        self.gridLayout.addWidget(self.labelOverhangBotRight, 18, 0, 1, 1)
        self.labelOverhangBotLeft = QtGui.QLabel(Dialog)
        self.labelOverhangBotLeft.setText('Overhang bottom left')
        self.labelOverhangBotLeft.setObjectName('labelOverhangBotLeft')
        self.gridLayout.addWidget(self.labelOverhangBotLeft, 17, 0, 1, 1)
        self.labelOverhangBotFront = QtGui.QLabel(Dialog)
        self.labelOverhangBotFront.setText('Overhang bottom front')
        self.labelOverhangBotFront.setObjectName('labelOverhangBotFront')
        self.gridLayout.addWidget(self.labelOverhangBotFront, 20, 0, 1, 1)
        spacerItem2 = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem2, 22, 0, 1, 1)
        self.overhangTopRight = QtGui.QDoubleSpinBox(Dialog)
        self.overhangTopRight.setMaximum(999999.0)
        self.overhangTopRight.setObjectName('overhangTopRight')
        self.gridLayout.addWidget(self.overhangTopRight, 14, 2, 1, 1)
        self.overhangTopFront = QtGui.QDoubleSpinBox(Dialog)
        self.overhangTopFront.setMaximum(999999.0)
        self.overhangTopFront.setObjectName('overhangTopFront')
        self.gridLayout.addWidget(self.overhangTopFront, 15, 2, 1, 1)
        self.overhangTopRight = QtGui.QDoubleSpinBox(Dialog)
        self.overhangTopRight.setMaximum(999999.0)
        self.overhangTopRight.setObjectName('overhangTopRight')
        self.gridLayout.addWidget(self.overhangTopRight, 16, 2, 1, 1)
        self.overhangBotLeft = QtGui.QDoubleSpinBox(Dialog)
        self.overhangBotLeft.setMaximum(999999.0)
        self.overhangBotLeft.setObjectName('overhangBotLeft')
        self.gridLayout.addWidget(self.overhangBotLeft, 17, 2, 1, 1)
        self.overhangBotRight = QtGui.QDoubleSpinBox(Dialog)
        self.overhangBotRight.setMaximum(999999.0)
        self.overhangBotRight.setObjectName('overhangBotRight')
        self.gridLayout.addWidget(self.overhangBotRight, 18, 2, 1, 1)
        self.overhangBotFront = QtGui.QDoubleSpinBox(Dialog)
        self.overhangBotFront.setMaximum(999999.0)
        self.overhangBotFront.setObjectName('overhangBotFront')
        self.gridLayout.addWidget(self.overhangBotFront, 20, 2, 1, 1)
        self.overhangBotBack = QtGui.QDoubleSpinBox(Dialog)
        self.overhangBotBack.setMaximum(999999.0)
        self.overhangBotBack.setObjectName('overhangBotBack')
        self.gridLayout.addWidget(self.overhangBotBack, 21, 2, 1, 1)

        self.pushButtonCreate.pressed.connect(self.createBox)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def createBox(self):
        boxWidth = self.doubleSpinBoxWidth.value()
        boxHeight = self.doubleSpinBoxHeight.value()
        boxLength = self.doubleSpinBoxLength.value()
        notchWidth = self.doubleSpinBoxNotchWidth.value()
        materialWidth = self.doubleSpinBoxMaterialWidth.value()
        drawSides = [self.checkBoxTop.isChecked(),
                     self.checkBoxBottom.isChecked(),
                     self.checkBoxLeft.isChecked(),
                     self.checkBoxRight.isChecked(),
                     self.checkBoxFront.isChecked(),
                     self.checkBoxBack.isChecked()]
        overhangTop = [self.overhangTopLeft.value(),
                       self.overhangTopRight.value(),
                       self.overhangTopFront.value(),
                       self.overhangTopRight.value()]
        overhangBottom = [self.overhangBotLeft.value(),
                          self.overhangBotRight.value(),
                          self.overhangBotFront.value(),
                          self.overhangBotBack.value()]
        if (boxWidth == 0) or (boxHeight == 0) or (boxLength == 0):
            app.Console.PrintError('Error! None of the values can be 0!')
            # we bail out without doing anything
            return

        box = create_box(materialWidth, boxWidth, boxHeight, boxLength, notchWidth, drawSides, overhangTop, overhangBottom)
        gui.SendMsgToActiveView('ViewFit')


d = QtGui.QWidget()
ui = Ui_Dialog()
ui.setupUi(d)
d.show()



import FreeCAD
import Draft
import BOPTools.JoinFeatures


#drawSides = [top, bottom, left, right, front, back]
#overhangTop = [top left, top right, top front, top back]
#overhangBottom = [bottom left, bottom right, bottom front, bottom back]
def create_box(materialWidth, boxWidth, boxHeight, boxLength, notchWidth, drawSides=[True, True, True, True, True, True], overhangTop=[0.0, 0.0, 0.0, 0.0], overhangBottom=[0.0, 0.0, 0.0, 0.0]):
    doc = FreeCAD.activeDocument()
    boxobjects = []

    # top and bottom side
    if drawSides[1]:
        side1 = draw_bottom('bottom', materialWidth, boxWidth, boxLength, notchWidth, drawSides, overhangBottom)
        boxobjects.append(side1)

    if drawSides[0]:
        side2 = draw_bottom('top', materialWidth, boxWidth, boxLength, notchWidth, drawSides, overhangTop)
        Draft.move([side2], FreeCAD.Vector(0.0, 0.0, boxHeight - materialWidth), copy=False)
        boxobjects.append(side2)

    # left and right side
    line1 = notch_line(boxHeight, notchWidth, materialWidth, True, drawSides[5])
    Draft.move([line1], FreeCAD.Vector(materialWidth, boxLength - materialWidth, 0.0), copy=False)

    line2 = notch_line(boxLength, notchWidth, materialWidth, True, drawSides[1])
    Draft.rotate([line2], 90.0, FreeCAD.Vector(0.0, 0.0, 0.0), axis=FreeCAD.Vector(0.0, 0.0, 1.0), copy=False)
    Draft.move([line2], FreeCAD.Vector(materialWidth, materialWidth, 0.0), copy=False)

    line3 = notch_line(boxHeight, notchWidth, materialWidth, True, drawSides[4])
    Draft.rotate([line3], 180.0, FreeCAD.Vector(0.0, 0.0, 0.0), axis=FreeCAD.Vector(0.0, 0.0, 1.0), copy=False)
    Draft.move([line3], FreeCAD.Vector(boxHeight - materialWidth, materialWidth, 0.0), copy=False)

    line4 = notch_line(boxLength, notchWidth, materialWidth, True, drawSides[0])
    Draft.rotate([line4], 270.0, FreeCAD.Vector(0.0, 0.0, 0.0), axis=FreeCAD.Vector(0.0, 0.0, 1.0), copy=False)
    Draft.move([line4], FreeCAD.Vector(boxHeight - materialWidth, boxLength - materialWidth, 0.0), copy=False)

    Draft.rotate([line1, line2, line3, line4], 270.0, FreeCAD.Vector(0.0, 0.0, 0.0), axis=FreeCAD.Vector(0.0, 1.0, 0.0), copy=False)

    doc.recompute()
    lines = [line1, line2, line3, line4]
    if drawSides[2]:
        side3 = extrudeLines('left', lines, materialWidth)
        boxobjects.append(side3)

    if drawSides[3]:
        side4 = extrudeLines('right', lines, materialWidth)
        Draft.move([side4], FreeCAD.Vector(boxWidth - materialWidth, 0.0, 0.0), copy=False)
        boxobjects.append(side4)

    # front and back side
    line1 = notch_line(boxWidth, notchWidth, materialWidth, False, drawSides[0])
    Draft.move([line1], FreeCAD.Vector(0.0, boxHeight - materialWidth, 0.0), copy=False)

    line2 = notch_line(boxHeight, notchWidth, materialWidth, True, drawSides[3])
    Draft.rotate([line2], 90.0, FreeCAD.Vector(0.0, 0.0, 0.0), axis=FreeCAD.Vector(0.0, 0.0, 1.0), copy=False)
    Draft.move([line2], FreeCAD.Vector(boxWidth, materialWidth, 0.0), copy=False)

    line3 = notch_line(boxWidth, notchWidth, materialWidth, False, drawSides[1])
    Draft.rotate([line3], 180.0, FreeCAD.Vector(0.0, 0.0, 0.0), axis=FreeCAD.Vector(0.0, 0.0, 1.0), copy=False)
    Draft.move([line3], FreeCAD.Vector(boxWidth, materialWidth, 0.0), copy=False)

    line4 = notch_line(boxHeight, notchWidth, materialWidth, True, drawSides[2])
    Draft.rotate([line4], 270.0, FreeCAD.Vector(0.0, 0.0, 0.0), axis=FreeCAD.Vector(0.0, 0.0, 1.0), copy=False)
    Draft.move([line4], FreeCAD.Vector(0.0, boxHeight - materialWidth, 0.0), copy=False)

    Draft.rotate([line1, line2, line3, line4], 90.0, FreeCAD.Vector(0.0, 0.0, 0.0), axis=FreeCAD.Vector(1.0, 0.0, 0.0), copy=False)

    doc.recompute()
    lines = [line1, line2, line3, line4]
    if drawSides[4]:
        side5 = extrudeLines('front', lines, materialWidth)
        boxobjects.append(side5)

    if drawSides[5]:
        side6 = extrudeLines('back', lines, materialWidth)
        Draft.move([side6], FreeCAD.Vector(0.0, boxLength - materialWidth, 0.0), copy=False)
        boxobjects.append(side6)

    comp1 = doc.addObject('Part::Compound', 'Box')
    comp1.Links = boxobjects

    doc.recompute()


#drawSides = [top, bottom, left, right, front, back]
#overhang = [left, right, front, back]
def draw_bottom(partname, materialWidth, boxWidth, boxLength, notchWidth, drawSides=[True, True, True, True, True, True], overhang=[0.0, 0.0, 0.0, 0.0]):
    lines = []

    if overhang[2] > 0:
        lines1 = notch_holes(boxWidth, notchWidth, materialWidth, overhang[2], drawSides[4], overhang[0], overhang[1])
    else:
        lines1 = [notch_line(boxWidth, notchWidth, materialWidth, False, drawSides[4])]

    lines.extend(lines1)

    if overhang[1] > 0:
        lines2 = notch_holes(boxLength, notchWidth, materialWidth, overhang[1], drawSides[3], overhang[2], overhang[3])
    else:
        lines2 = [notch_line(boxLength, notchWidth, materialWidth, False, drawSides[3])]

    Draft.rotate(lines2, 90.0, FreeCAD.Vector(0.0, 0.0, 0.0), axis=FreeCAD.Vector(0.0, 0.0, 1.0), copy=False)
    Draft.move(lines2, FreeCAD.Vector(boxWidth, 0.0, 0.0), copy=False)
    lines.extend(lines2)

    if overhang[3] > 0:
        lines3 = notch_holes(boxWidth, notchWidth, materialWidth, overhang[3], drawSides[5], overhang[1], overhang[0])
    else:
        lines3 = [notch_line(boxWidth, notchWidth, materialWidth, False, drawSides[5])]

    Draft.rotate(lines3, 180.0, FreeCAD.Vector(boxWidth / 2, 0.0, 0.0), axis=FreeCAD.Vector(0.0, 0.0, 1.0), copy=False)
    Draft.move(lines3, FreeCAD.Vector(0.0, boxLength, 0.0), copy=False)
    lines.extend(lines3)

    if overhang[0] > 0:
        lines4 = notch_holes(boxLength, notchWidth, materialWidth, overhang[0], drawSides[2], overhang[3], overhang[2])
    else:
        lines4 = [notch_line(boxLength, notchWidth, materialWidth, False, drawSides[2])]

    Draft.rotate(lines4, 270.0, FreeCAD.Vector(0.0, 0.0, 0.0), axis=FreeCAD.Vector(0.0, 0.0, 1.0), copy=False)
    Draft.move(lines4, FreeCAD.Vector(0.0, boxLength, 0.0), copy=False)
    lines.extend(lines4)

    doc = FreeCAD.activeDocument()
    doc.recompute()
    side1 = extrudeLines(partname, lines, materialWidth)
    return side1


def notch_line(length, notchWidth, materialWidth, inside=False, drawNotches=True):
    doc = FreeCAD.activeDocument()
    if not drawNotches:
        if inside:
            len2 = length - 2 * materialWidth
        else:
            len2 = length

        points = [FreeCAD.Vector(0.0, 0.0, 0.0),
                  FreeCAD.Vector(len2, 0.0, 0.0)]
        line = Draft.makeWire(points, closed=False, face=False, support=None)
        doc.recompute()
        return line

    nrNotches = int((length - 2 * materialWidth) / (notchWidth * 2))
    edgeLen = (length - (notchWidth * (nrNotches * 2 - 1))) / 2
    if inside:
        edgeLen = edgeLen - materialWidth

    points = [FreeCAD.Vector(0, 0, 0)]
    x = edgeLen

    for count in range(0, nrNotches):
        points.append(FreeCAD.Vector(x, 0, 0))
        points.append(FreeCAD.Vector(x, materialWidth, 0))
        x = x + notchWidth
        points.append(FreeCAD.Vector(x, materialWidth, 0))
        points.append(FreeCAD.Vector(x, 0, 0))
        x = x + notchWidth

    points.append(FreeCAD.Vector(x - notchWidth + edgeLen, 0, 0))
    line = Draft.makeWire(points, closed=False, face=False, support=None)
    Draft.autogroup(line)
    doc.recompute()
    return line


def notch_holes(length, notchWidth, materialWidth, overhang, drawHoles=True, overhangLeft=0, overhangRight=0):
    nrNotches = int((length - 2 * materialWidth) / (notchWidth * 2))
    x = (length - (notchWidth * (nrNotches * 2 - 1))) / 2
    lines = []

    if drawHoles:
        for count in range(0, nrNotches):
            points = [FreeCAD.Vector(x, 0, 0), FreeCAD.Vector(x, materialWidth, 0), FreeCAD.Vector(x + notchWidth, materialWidth, 0), FreeCAD.Vector(x + notchWidth, 0, 0)]
            line = Draft.makeWire(points, closed=True, face=False, support=None)
            Draft.autogroup(line)
            lines.append(line)
            x = x + notchWidth * 2

    points = [FreeCAD.Vector(-overhangLeft, 0, 0),
              FreeCAD.Vector(-overhangLeft, -overhang, 0),
              FreeCAD.Vector(length + overhangRight, -overhang, 0),
              FreeCAD.Vector(length + overhangRight, 0, 0)]
    ohline = Draft.makeWire(points, closed=False, face=False, support=None)
    lines.append(ohline)
    doc = FreeCAD.activeDocument()
    doc.recompute()
    return lines


def extrudeLines(extrudename, lines, materialWidth):
    doc = FreeCAD.activeDocument()

    j = BOPTools.JoinFeatures.makeConnect(name='Outline')
    j.Objects = lines
    j.Proxy.execute(j)
    j.purgeTouched()
    for obj in j.ViewObject.Proxy.claimChildren():
        obj.ViewObject.hide()

    f = doc.addObject('Part::Extrusion', extrudename)
    f.Base = j
    f.DirMode = 'Normal'
    f.DirLink = None
    f.LengthFwd = materialWidth
    f.LengthRev = 0
    f.Solid = True
    f.Reversed = False
    f.Symmetric = False
    f.TaperAngle = 0
    f.TaperAngleRev = 0
    f.Base.ViewObject.hide()
    return f
