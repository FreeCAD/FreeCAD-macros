# -*- coding: utf-8 -*-
# Opens current visible objects in Slic3r. One can use different slicing software

__Title__ = '3D Print / Slice'
__Author__ = 'Damian Łoziński'
__Version__ = '0.4.1'
__Date__ = '2025-01-12'
__Comment__ = 'Open selected (or all) objects in slicing program'
__Web__ = 'https://github.com/dlozinski/FreeCAD-macros/blob/doc/ImportExport/ExportToSlicer.md'
__Wiki__ = ''
__Icon__ = 'Export2Slicer.png'
__Help__ = 'You may need to change slicer path. To do so open Tools > Edit parameters > BaseApp/Preferences/Macros/Export2Slicer'
__Status__ = 'Stable'
__Requires__ = 'freecad 0.17+'
__Communication__ = 'lozinski dot d at gmail dot com'
__Files__ = 'Export2Slicer.png'

import os
import re
from subprocess import Popen
import shlex
import tempfile

import FreeCAD as app
import FreeCADGui as gui
import ImportGui


MACRO_PARAMS = app.ParamGet('User parameter:BaseApp/Preferences/Macros/Export2Slicer')
DEFAULT_SLICER_CMD = '"/Applications/Original Prusa Drivers/PrusaSlicer.app/Contents/MacOS/PrusaSlicer" --single-instance "{file}"'
DEFAULT_OUTPUT_FORMAT = 'step'


def get_string_param(name, default):
    value = MACRO_PARAMS.GetString(name)
    if not value:
        MACRO_PARAMS.SetString(name, default)
        value = default
    return value


slicer_cmd = get_string_param('SlicerCommand', DEFAULT_SLICER_CMD)
output_format = get_string_param('OutputFormat', DEFAULT_OUTPUT_FORMAT)


def escape(text):
    return re.sub(r'[^a-zA-Z0-9_-]', '_', text)


def get_export_filename(doc_filename, obj_names):
    """Returns valid filename for export file."""
    if doc_filename:
        dirname = os.path.dirname(doc_filename)
        filename = "{}-{}.{}".format(
            os.path.basename(doc_filename).partition('.')[0],
            escape('-'.join(obj_names)),
            output_format)
        file_path = os.path.join(dirname, filename)
    else:
        suffix = "-{}.{}".format(
        escape('-'.join(obj_names)),
        output_format)
        file_path = tempfile.NamedTemporaryFile(suffix=suffix).name
    return file_path


def main():
    doc = app.activeDocument()
    if not doc:
        app.Console.PrintError('Export2Slicer: No active document')
        return
    selection = gui.Selection.getSelectionEx()
    objects_to_export = [x.Object for x in selection] or doc.Objects
    if not len(objects_to_export):        
        app.Console.PrintError('Export2Slicer: No objects to export')
        return
    objs_names = [o.Label for o in objects_to_export]
    export_path = get_export_filename(doc.FileName, objs_names)
    ImportGui.export(objects_to_export, export_path)
    Popen(shlex.split(slicer_cmd.format(file=export_path)))
    app.Console.PrintNotification(f'Export2Slicer: Objects exported into: {export_path}\n')


main()
