"""Get the global placement of selected objects, respecting links."""
# Usage: select some objects or some subelements and run.

__Name__ = 'Get Global Placement'
__Comment__ = 'Get the global placement, respecting links, link arrays and link scale'
__Author__ = 'galou_breizh'
__Version__ = '1.0.2'
__Date__ = '2023-02-12'
__License__ = 'LGPL-2.0-or-later'
__Web__ = 'http://forum.freecadweb.org/viewtopic.php?f=?&t=????'
__Wiki__ = 'http://www.freecadweb.org/wiki/Macro_Title_Of_macro'
__Icon__ = ''
__Help__ = 'Select some objects or some subelements and run'
__Status__ = ''
__Requires__ = 'FreeCAD >=0.19'
__Communication__ = 'https://github.com/FreeCAD/FreeCAD-macros/issues/'
__Files__ = ''

from math import hypot, copysign
from typing import Set, Tuple

import FreeCAD as app
import FreeCADGui as gui
 

def get_global_placement_and_scale(object: app.DocumentObject,
                         subobject_fullpath: str,
                         ) -> Tuple[app.Placement, app.Vector]:
    """Return the global placement and the total scale, respecting links.
    This is in contrast with ``object.getGlobalPlacement()`` that returns
    the placement of the original object, not the linked one.

    Parameters
    ----------
    - root_object: SelectionObject.Object, where SelectionObject is obtained
        with gui.Selection.getSelectionEx('', 0)
        (i.e. not gui.Selection.getSelectionEx()).
    - subobject_fullpath: SelectionObject.SubElementNames[i].
        Examples:
        - 'Face6' if you select the top face of a cube solid made in Part.
        - 'Body.Box001.' if you select the tip of a Part->Body->"additive
            primitve" in PartDesign.
        - 'Body.Box001.Face6' if you select the top face of a Part->Body->
            "additive primitve" in PartDesign.
    """
    
    mx = None
    if subobject_fullpath[-1] == '.':
        # This seems to be nessecary on ``Part::*`` objects,``PartDesign::Body' etc.
        # to fetch the placement of the object itself instead of its parent
        mx = object.getSubObject(subobject_fullpath + '_', 4, transform = True)
        # Origin objects throws an error but we just ignore that
        # if it's a App::Part the underscore won't work and None is returned
        # and if a existing subelement is selected thepath won't end vith dot
    if not mx:
        mx = object.getSubObject(subobject_fullpath, 4, transform = True)
    if not mx:
        return
    # find scale. Works only if uniform?
    s_gen = (copysign(hypot(*mx.col(i)), mx.col(i)[i]) for i in range(3))
    scale_vec = app.Vector(*s_gen)
    # remove the scale from the rotation
    unscaled = app.Matrix(mx)
    pos = unscaled.col(3)
    unscaled.setCol(3, app.Vector())
    unscaled.scale(*(1/s for s in scale_vec))
    unscaled.setCol(3, pos)
    return app.Placement(unscaled), scale_vec


def get_global_placement(object: app.DocumentObject,
                         subobject_fullpath: str,
                         ) -> app.Placement:
    """Return the global placement respecting links.
    This is in contrast with ``object.getGlobalPlacement()`` that returns
    the placement of the original object, not the linked one.

    Parameters
    ----------
    - root_object: SelectionObject.Object, where SelectionObject is obtained
        with gui.Selection.getSelectionEx('', 0)
        (i.e. not gui.Selection.getSelectionEx()).
    - subobject_fullpath: SelectionObject.SubElementNames[i].
        Examples:
        - 'Face6' if you select the top face of a cube solid made in Part.
        - 'Body.Box001.' if you select the tip of a Part->Body->"additive
            primitve" in PartDesign.
        - 'Body.Box001.Face6' if you select the top face of a Part->Body->
            "additive primitve" in PartDesign.
    """

    return get_global_placement_and_scale(object, subobject_fullpath)[0]


def print_placement(object_name: str,
                    sub_fullpath: str,
                    placement: app.Placement,
                    ) -> None:
    """Pretty-print a placement in the console."""
    dot = '.' if sub_fullpath else ''
    app.Console.PrintMessage(
        f'{object_name}{dot}{sub_fullpath}:'
        + ' {b.x:.3f}, {b.y:.3f}, {b.z:.3f};'.format(b=placement.Base)
        + ' {q[0]:.4f}, {q[1]:.4f}, {q[2]:.4f}, {q[3]:.4f};'.format(
            q=placement.Rotation.Q)
        + ' (rpy: {r[2]:.2f}, {r[1]:.2f}, {r[0]:.2f}) deg'.format(
            r=placement.Rotation.getYawPitchRoll())
        + '\n')

def get_and_print_selected_placements():
    """Get selected objects and print their placement."""
    doc = app.activeDocument()
    if doc is None:
        return

    selection = gui.Selection.getSelectionEx('', 0)
    if not selection:
        app.Console.PrintWarning('Nothing selected, nothing to do\n')
        return

    shown_paths: Set[str] = set()
    for selection_object in selection:
        object_ = selection_object.Object
        sub_fullpaths = selection_object.SubElementNames
        if not sub_fullpaths:
            # An object is selected, not a face, edge, vertex.
            placement = get_global_placement(object_, '')
            print_placement(object_.Name, '', placement)
            continue
        for sub_fullpath in sub_fullpaths:
            # One or more subelements are selected.
            wo_subelement = strip_subelement(sub_fullpath)
            path = object_.Name + wo_subelement
            if path in shown_paths:
                continue
            shown_paths.add(path)
            placement = get_global_placement(object_, sub_fullpath)
            print_placement(object_.Name, wo_subelement, placement)


if __name__ == '__main__':
    get_and_print_selected_placements()
